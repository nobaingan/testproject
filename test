
@ExtendWith(MockitoExtension.class)
class SchedulerMetricsTest {

    @Mock
    private MeterRegistry meterRegistry;

    private SchedulerMetrics schedulerMetrics;

    @BeforeEach
    void setUp() {
        schedulerMetrics = new SchedulerMetrics(meterRegistry);
        schedulerMetrics.init();
    }

    static Stream<String> runTypes() {
        return Stream.of("main", "retry");
    }

    @ParameterizedTest
    @MethodSource("runTypes")
    void testSuccessIncrement(String runType) {
        schedulerMetrics.incrementSuccess(runType);
        assertEquals(1, schedulerMetrics.getSuccessCount(runType));
    }

    @ParameterizedTest
    @MethodSource("runTypes")
    void testFailureIncrement(String runType) {
        schedulerMetrics.incrementFailure(runType);
        assertEquals(1, schedulerMetrics.getFailureCount(runType));
    }

    @ParameterizedTest
    @MethodSource("runTypes")
    void testResetClearsCounts(String runType) {
        schedulerMetrics.incrementSuccess(runType);
        schedulerMetrics.incrementFailure(runType);
        schedulerMetrics.reset(runType);

        assertEquals(0, schedulerMetrics.getSuccessCount(runType));
        assertEquals(0, schedulerMetrics.getFailureCount(runType));
        assertEquals(0, schedulerMetrics.getTotalCount(runType));
        assertTrue(schedulerMetrics.getLastRunTimestamp(runType) > 0);
    }

    @ParameterizedTest
    @MethodSource("runTypes")
    void testGetTimerNotNull(String runType) {
        Timer timer = schedulerMetrics.getTimer(runType);
        assertNotNull(timer);
    }

    @Test
    void testInvalidRunTypeAccess() {
        String invalidRunType = "invalid";

        assertThrows(NullPointerException.class, () -> schedulerMetrics.incrementSuccess(invalidRunType));
        assertThrows(NullPointerException.class, () -> schedulerMetrics.getTimer(invalidRunType));
        assertThrows(NullPointerException.class, () -> schedulerMetrics.reset(invalidRunType));
    }
}
