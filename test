import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import javax.validation.ConstraintViolationException;
import java.util.regex.Pattern;

public class ValidFieldValidator implements ConstraintValidator<ValidField, String> {
    // Regex pattern for individual segments (allows only alphanumeric + dots)
    private static final Pattern SEGMENT_PATTERN = Pattern.compile("^[a-zA-Z0-9]+(?:\\.[a-zA-Z0-9]+)*$");

    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        if (value == null || value.isEmpty()) {
            return true; // Allow empty fields
        }

        String sanitizedValue = sanitize(value); // Step 1: Clean input
        String[] segments = sanitizedValue.split(","); // Step 2: Split into parts

        for (String segment : segments) {
            if (!SEGMENT_PATTERN.matcher(segment).matches()) {
                throw new ConstraintViolationException("Invalid query parameter format: " + segment, null);
            }
        }
        return true;
    }

    /**
     * Sanitizes the input string by removing unwanted characters.
     * Allows only alphanumeric characters, dots, and commas.
     */
    public static String sanitize(String input) {
        if (input == null) {
            return null;
        }
        return input.replaceAll("[^a-zA-Z0-9.,]", ""); // Remove unwanted characters
    }
}
