Here’s a **clean, extensible, production-grade implementation** of application metrics using **Spring Boot + Micrometer + Prometheus**, following **SOLID principles** and **Java best practices**.

---

## ✅ Features

* Centralized **metric definitions** via `enum`
* Clean `AppMetricsRegistry` for dynamic registration
* Supports `Counter` and `Timer`
* Easy integration in services
* Micrometer + Prometheus compatible
* Scalable for 30+ metrics

---

## 🔧 Tech Stack

* **Spring Boot**
* **Micrometer**
* **Spring Boot Actuator**
* **Prometheus** (optional integration)

---

## 🧱 1. MetricType Enum

```java
public enum MetricType {
    COUNTER,
    TIMER
}
```

---

## 📦 2. Metric Definition Enum

```java
public enum AppMetric {
    // Publisher metrics
    PUBLISHER_DB_ACTIVE_RECURRING_SUCCESS("publisher.db.activerecurringpayment.success.total", MetricType.COUNTER, "Publisher DB active recurring payment success count"),
    PUBLISHER_DB_ACTIVE_RECURRING_FAILURE("publisher.db.activerecurringpayment.failure.total", MetricType.COUNTER, "Publisher DB active recurring payment failure count"),
    PUBLISHER_DB_ACTIVE_RECURRING_DURATION("publisher.db.read.activerecurringpayments.duration.seconds", MetricType.TIMER, "Publisher DB active recurring payments read duration"),

    PUBLISHER_INITIATEPAYMENT_MSG_SUCCESS("publisher.amd.initiatepayment.message.success.total", MetricType.COUNTER, "Publisher initiate payment message success count"),
    PUBLISHER_INITIATEPAYMENT_MSG_FAILURE("publisher.send.initiatepaymentmessage.failure.total", MetricType.COUNTER, "Publisher initiate payment message failure count"),
    PUBLISHER_INITIATEPAYMENT_MSG_RETRIES("publisher.send.initiatepaymentmessage.retries.total", MetricType.COUNTER, "Publisher initiate payment message retries count"),

    PUBLISHER_UPDATE_RECURRING_PAYMENT_ID_SUCCESS("publisher.db.update.recurringpayment.id.success.total", MetricType.COUNTER, "Publisher DB update recurring payment ID success count"),
    PUBLISHER_UPDATE_RECURRING_PAYMENT_ID_FAILURE("publisher.db.update.recurringpayment.id.failure.total", MetricType.COUNTER, "Publisher DB update recurring payment ID failure count"),
    PUBLISHER_UPDATE_RECURRING_PAYMENT_ID_DURATION("publisher.db.update.recurringpayment.id.duration.seconds", MetricType.TIMER, "Publisher DB update recurring payment ID duration"),

    PUBLISHER_UPDATE_AUDIT_PAYMENT_QUEUED_SUCCESS("publisher.db.update.auditpayment.queued.success.total", MetricType.COUNTER, "Publisher DB update audit payment queued success count"),
    PUBLISHER_UPDATE_AUDIT_PAYMENT_QUEUED_FAILURE("publisher.db.update.auditpayment.queued.failure.total", MetricType.COUNTER, "Publisher DB update audit payment queued failure count"),
    PUBLISHER_UPDATE_AUDIT_PAYMENT_QUEUED_DURATION("publisher.db.update.auditpayment.queued.duration.seconds", MetricType.TIMER, "Publisher DB update audit payment queued duration"),

    // Consumer metrics
    CONSUMER_DB_READ_ACTIVE_RECURRING_WITH_NEW_TX_SUCCESS("consumer.db.read.activerecurringpayment.withnewtransaction.success.total", MetricType.COUNTER, "Consumer DB read active recurring payment with new transaction success count"),
    CONSUMER_DB_READ_ACTIVE_RECURRING_WITH_NEW_TX_FAILURE("consumer.db.read.activerecurringpayment.withnewtransaction.failure.total", MetricType.COUNTER, "Consumer DB read active recurring payment with new transaction failure count"),
    CONSUMER_DB_READ_ACTIVE_RECURRING_WITH_NEW_TX_DURATION("consumer.db.read.activerecurringpayment.withnewtransaction.duration.seconds", MetricType.TIMER, "Consumer DB read active recurring payment with new transaction duration"),

    CONSUMER_DB_UPDATE_AUDIT_PAYMENT_RECEIVED_SUCCESS("consumer.db.update.auditpayment.received.success.total", MetricType.COUNTER, "Consumer DB update audit payment received success count"),
    CONSUMER_DB_UPDATE_AUDIT_PAYMENT_RECEIVED_FAILURE("consumer.db.update.auditpayment.received.failure.total", MetricType.COUNTER, "Consumer DB update audit payment received failure count"),
    CONSUMER_DB_UPDATE_AUDIT_PAYMENT_RECEIVED_DURATION("consumer.db.update.auditpayment.received.duration.seconds", MetricType.TIMER, "Consumer DB update audit payment received duration"),

    CONSUMER_POST_PBB_VRP_PAYMENTS_SUCCESS("consumer.post.pbb.vrppayments.success.total", MetricType.COUNTER, "Consumer post PBB VRP payments success count"),
    CONSUMER_POST_PBB_VRP_PAYMENTS_FAILURE("consumer.post.pbb.vrppayments.failure.total", MetricType.COUNTER, "Consumer post PBB VRP payments failure count"),
    CONSUMER_POST_PBB_VRP_PAYMENTS_FAILURE_4001("consumer.post.pbb.vrppayments.failure.total.errorcode_4001", MetricType.COUNTER, "Consumer post PBB VRP payments failure with error code 4001"),
    CONSUMER_POST_PBB_VRP_PAYMENTS_FAILURE_409("consumer.post.pbb.vrppayments.failure.total.errorcode_409", MetricType.COUNTER, "Consumer post PBB VRP payments failure with error code 409"),
    CONSUMER_POST_PBB_VRP_PAYMENTS_DURATION("consumer.post.pbb.vrppayments.duration.seconds", MetricType.TIMER, "Consumer post PBB VRP payments duration"),

    CONSUMER_DB_UPDATE_AUDIT_PAYMENT_FAILURE_SUCCESS("consumer.db.update.auditpayment.failure.success.total", MetricType.COUNTER, "Consumer DB update audit payment failure-success count"),
    CONSUMER_DB_UPDATE_AUDIT_PAYMENT_FAILURE_FAILURE("consumer.db.update.auditpayment.failure.failure.total", MetricType.COUNTER, "Consumer DB update audit payment failure-failure count"),
    CONSUMER_DB_UPDATE_AUDIT_PAYMENT_FAILURE_DURATION("consumer.db.update.auditpayment.failure.duration.seconds", MetricType.TIMER, "Consumer DB update audit payment failure duration"),

    CONSUMER_DB_UPDATE_AUDIT_PAYMENT_SUCCESS_SUCCESS("consumer.db.update.auditpaymentsuccess.success.total", MetricType.COUNTER, "Consumer DB update audit payment success-success count"),
    CONSUMER_DB_UPDATE_AUDIT_PAYMENT_SUCCESS_FAILURE("consumer.db.update.auditpaymentsuccess.failure.total", MetricType.COUNTER, "Consumer DB update audit payment success-failure count"),
    CONSUMER_DB_UPDATE_AUDIT_PAYMENT_SUCCESS_DURATION("consumer.db.update.auditpaymentsuccess.duration.seconds", MetricType.TIMER, "Consumer DB update audit payment success duration"),

    CONSUMER_RECEIVE_PROCESS_INITIATE_PAYMENT_MSG_SUCCESS("consumer.receive.processinitiatepayment.message.success.total", MetricType.COUNTER, "Consumer receive process initiate payment message success count"),
    CONSUMER_RECEIVE_PROCESS_INITIATE_PAYMENT_MSG_FAILURE("consumer.receive.processinitiatepayment.message.failure.total", MetricType.COUNTER, "Consumer receive process initiate payment message failure count (no retries)"),

    CONSUMER_REQUEUE_PROCESS_INITIATE_PAYMENT_MSG_SUCCESS("consumer.requeue.processinitiatepayment.message.success.total", MetricType.COUNTER, "Consumer requeue process initiate payment message success count"),
    CONSUMER_REQUEUE_PROCESS_INITIATE_PAYMENT_MSG_FAILURE("consumer.requeue.processinitiatepayment.message.failure.total", MetricType.COUNTER, "Consumer requeue process initiate payment message failure count"),

    CONSUMER_FAILED_INITIATE_PAYMENT_GETCUSTOMER_SUCCESS("consumer.failed.initiatepayment.getcustomer.success.total", MetricType.COUNTER, "Consumer failed initiate payment get customer success count"),
    CONSUMER_FAILED_INITIATE_PAYMENT_GETCUSTOMER_FAILURE("consumer.failed.initiatepayment.getcustomer.failure.total", MetricType.COUNTER, "Consumer failed initiate payment get customer failure count"),
    CONSUMER_FAILED_INITIATE_PAYMENT_GETCUSTOMER_DURATION("consumer.failed.initiatepayment.getcustomer.duration.seconds", MetricType.TIMER, "Consumer failed initiate payment get customer duration"),

    CONSUMER_FAILED_INITIATE_PAYMENT_SEND_EMAIL_SUCCESS("consumer.failed.initiatepayment.sendemail.success.total", MetricType.COUNTER, "Consumer failed initiate payment send email success count"),
    CONSUMER_FAILED_INITIATE_PAYMENT_SEND_EMAIL_FAILURE("consumer.failed.initiatepayment.sendemail.failure.total", MetricType.COUNTER, "Consumer failed initiate payment send email failure count"),
    CONSUMER_FAILED_INITIATE_PAYMENT_SEND_EMAIL_DURATION("consumer.failed.initiatepayment.sendemail.duration.seconds", MetricType.TIMER, "Consumer failed initiate payment send email duration"),

    PUBLISHER_SEND_INITIATEPAYMENTMESSAGE_DURATION("publisher.send.initiatepaymentmessage.duration.seconds", MetricType.TIMER, "Publisher send initiate payment message duration"),
    CONSUMER_RECEIVE_PROCESS_INITIATEPAYMENT_DURATION("consumer.receive.processinitiatepayment.duration.seconds", MetricType.TIMER, "Consumer receive process initiate payment duration");

    private final String name;
    private final MetricType type;
    private final String description;

    AppMetric(String name, MetricType type, String description) {
        this.name = name;
        this.type = type;
        this.description = description;
    }

    public String getName() { return name; }
    public MetricType getType() { return type; }
    public String getDescription() { return description; }
}


```

---

## 🧠 3. Central `AppMetricsRegistry`

```java
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Timer;
import org.springframework.stereotype.Component;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

@Component
public class AppMetricsRegistry {

    private final MeterRegistry meterRegistry;

    private final Map<String, Counter> counters = new ConcurrentHashMap<>();
    private final Map<String, Timer> timers = new ConcurrentHashMap<>();

    public AppMetricsRegistry(MeterRegistry meterRegistry) {
        this.meterRegistry = meterRegistry;
        registerAll(AppMetric.values());
    }

    private void registerAll(AppMetric[] metrics) {
        for (AppMetric metric : metrics) {
            switch (metric.getType()) {
                case COUNTER -> counters.put(metric.getName(),
                        Counter.builder(metric.getName())
                                .description(metric.getDescription())
                                .register(meterRegistry));
                case TIMER -> timers.put(metric.getName(),
                        Timer.builder(metric.getName())
                                .description(metric.getDescription())
                                .register(meterRegistry));
            }
        }
    }

    public void increment(AppMetric metric) {
        Counter counter = counters.get(metric.getName());
        if (counter != null) {
            counter.increment();
        }
    }

    public void record(AppMetric metric, long durationMillis) {
        Timer timer = timers.get(metric.getName());
        if (timer != null) {
            timer.record(durationMillis, TimeUnit.MILLISECONDS);
        }
    }

    public Timer.Sample startTimer() {
        return Timer.start(meterRegistry);
    }

    public void stopTimer(Timer.Sample sample, AppMetric metric) {
        Timer timer = timers.get(metric.getName());
        if (timer != null && sample != null) {
            sample.stop(timer);
        }
    }
}
```

---

## 🧪 4. Using Metrics in a Service

```java
import org.springframework.stereotype.Service;

@Service
public class PaymentService {

    private final AppMetricsRegistry metrics;

    public PaymentService(AppMetricsRegistry metrics) {
        this.metrics = metrics;
    }

    public void sendInitiatePaymentMessage() {
        Timer.Sample sample = metrics.startTimer();
        try {
            // Simulate business logic
            // ...

            metrics.increment(AppMetric.PUBLISHER_INITIATE_SUCCESS);
        } catch (Exception e) {
            metrics.increment(AppMetric.PUBLISHER_INITIATE_FAILURE);
        } finally {
            metrics.stopTimer(sample, AppMetric.PUBLISHER_INITIATE_DURATION);
        }
    }
}
```

---

## ⚙️ 5. `application.yml` for Actuator + Prometheus

```yaml
management:
  endpoints:
    web:
      exposure:
        include: prometheus, health, metrics
  metrics:
    export:
      prometheus:
        enabled: true
```

---

## 🔍 Prometheus Endpoint

Micrometer exposes all your metrics here:

```
GET http://localhost:8080/actuator/prometheus
```

Search by name (e.g., `publisher_send_initiatepaymentmessage_success_total`).

---

## ✅ Summary

| Feature                   | Included |
| ------------------------- | -------- |
| Centralized metric naming | ✅        |
| Clean service usage       | ✅        |
| Supports counter + timer  | ✅        |
| Autocomplete & safety     | ✅        |
| Scalable to 100+ metrics  | ✅        |
| Prometheus-ready          | ✅        |

---

Would you like a script or utility to auto-generate 30+ `AppMetric` enum entries from a list of metric names?
